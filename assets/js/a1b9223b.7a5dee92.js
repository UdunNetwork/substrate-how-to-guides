(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{182:function(e,t,n){"use strict";n.r(t),n.d(t,"MDXContext",(function(){return l})),n.d(t,"MDXProvider",(function(){return u})),n.d(t,"mdx",(function(){return O})),n.d(t,"useMDXComponents",(function(){return p})),n.d(t,"withMDXComponents",(function(){return m}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=i.a.createContext({}),m=function(e){return function(t){var n=p(t.components);return i.a.createElement(e,o({},t,{components:n}))}},p=function(e){var t=i.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return i.a.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},b=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),l=p(n),m=a,u=l["".concat(o,".").concat(m)]||l[m]||h[m]||r;return n?i.a.createElement(u,s(s({ref:t},c),{},{components:n})):i.a.createElement(u,s({ref:t},c))}));function O(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=b;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var d=2;d<r;d++)o[d]=n[d];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},66:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return l}));var a=n(3),i=n(8),r=(n(0),n(182)),o={sidebar_position:5,keywords:"pallet design, intermediate, runtime"},c={unversionedId:"tutorials/Kitties/interacting-functions",id:"tutorials/Kitties/interacting-functions",isDocsHomePage:!1,title:"Part IV: Interacting with your Kitties",description:"Add pallet capabilities that unleash the potential of your Substrate Kitty dApp.",source:"@site/docs/08-tutorials/01-Kitties/interacting-functions.md",sourceDirName:"08-tutorials/01-Kitties",slug:"/tutorials/Kitties/interacting-functions",permalink:"/substrate-how-to-guides/docs/tutorials/Kitties/interacting-functions",editUrl:"https://github.com/substrate-developer-hub/substrate-how-to-guides/edit/main/docs/08-tutorials/01-Kitties/interacting-functions.md",version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,keywords:"pallet design, intermediate, runtime"},sidebar:"tutorialSidebar",previous:{title:"Part III: Dispatchables and Events",permalink:"/substrate-how-to-guides/docs/tutorials/Kitties/dispatchables-and-events"},next:{title:"Part V: Kitties front-end",permalink:"/substrate-how-to-guides/docs/tutorials/Kitties/kitties-frontend"}},s=[{value:"Learning outcomes",id:"learning-outcomes",children:[]},{value:"Overview",id:"overview",children:[]},{value:"Steps",id:"steps",children:[{value:"1. Set a price for each Kitty",id:"1-set-a-price-for-each-kitty",children:[]},{value:"2. Transfer a Kitty",id:"2-transfer-a-kitty",children:[]},{value:"3. Buy a Kitty",id:"3-buy-a-kitty",children:[]},{value:"4. Breed Kitties",id:"4-breed-kitties",children:[]},{value:"5. Update <code>runtime/lib.rs</code> and interact with your Kitties",id:"5-update-runtimelibrs-and-interact-with-your-kitties",children:[]}]},{value:"Next steps",id:"next-steps",children:[]}],d={toc:s};function l(e){var t=e.components,n=Object(i.default)(e,["components"]);return Object(r.mdx)("wrapper",Object(a.default)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(r.mdx)("p",null,Object(r.mdx)("em",{parentName:"p"},"Add pallet capabilities that unleash the potential of your Substrate Kitty dApp.")),Object(r.mdx)("h2",{id:"learning-outcomes"},"Learning outcomes"),Object(r.mdx)("p",null,"\u27a1\ufe0f Learn how to create a dispatchable that updates an object in storage."),Object(r.mdx)("p",null,"\u27a1\ufe0f Getting a value from a struct in storage."),Object(r.mdx)("p",null,"\u27a1\ufe0f How to use the ",Object(r.mdx)("inlineCode",{parentName:"p"},"transfer")," from FRAME's Currency trait."),Object(r.mdx)("p",null,"\u27a1\ufe0f How to write sanity check using ",Object(r.mdx)("inlineCode",{parentName:"p"},"ensure!()"),"."),Object(r.mdx)("h2",{id:"overview"},"Overview"),Object(r.mdx)("p",null,"Up until this point in the tutorial, we've built a chain capable of only creating and tracking the ownership of Kitties. In this part of the tutorial, we want to make our runtime more\nlike a game by introducing other functions like buying and\nselling Kitties. In order to achieve this, we'll first need to enable users\nto update the price of their Kitty. Then we can add functionality to enable users to transfer, buy and breed Kitties."),Object(r.mdx)("h2",{id:"steps"},"Steps"),Object(r.mdx)("h3",{id:"1-set-a-price-for-each-kitty"},"1. Set a price for each Kitty"),Object(r.mdx)("h4",{id:"a-updating-a-stored-struct"},"A. Updating a stored struct"),Object(r.mdx)("p",null,"Every Kitty object has a price attribute that we have set to 0 as default. "),Object(r.mdx)("blockquote",null,Object(r.mdx)("p",{parentName:"blockquote"},"The default value for ",Object(r.mdx)("inlineCode",{parentName:"p"},"price")," is set to ",Object(r.mdx)("inlineCode",{parentName:"p"},"0")," in the ",Object(r.mdx)("inlineCode",{parentName:"p"},"create_kitty")," function. This inforrmation we'll use to check if the Kitty is for sale. ")),Object(r.mdx)("p",null,"To update the price of a Kitty, we'll need to:"),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},"Pull down the Kitty object."),Object(r.mdx)("li",{parentName:"ul"},"Update the price."),Object(r.mdx)("li",{parentName:"ul"},"Push it back into storage.")),Object(r.mdx)("p",null,"Changing a value from an existing struct would be written in the following way:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-rust"},"let mut object = Self::get_object(object_id);\nobject.value = new_value;\n\n<Objects<T>>::insert(object_id, object);\n")),Object(r.mdx)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.mdx)("div",{parentName:"div",className:"admonition-heading"},Object(r.mdx)("h5",{parentName:"div"},Object(r.mdx)("span",{parentName:"h5",className:"admonition-icon"},Object(r.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(r.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),Object(r.mdx)("div",{parentName:"div",className:"admonition-content"},Object(r.mdx)("p",{parentName:"div"}," Rust expects you to declare a variable as mutable (using the ",Object(r.mdx)("inlineCode",{parentName:"p"},"mut")," keyword) whenever its value is going to be updated."))),Object(r.mdx)("h4",{id:"b-checking-kitty-owner"},"B. Checking Kitty owner"),Object(r.mdx)("p",null,"As we create functions which modify objects in storage, we\nshould check that only the appropriate users are successful when calling those functions."),Object(r.mdx)("p",null,"For modifying a Kitty object, we'll first need to get the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Hash")," value of the owner of the\nKitty to ensure that it's the same as the sender."),Object(r.mdx)("blockquote",null,Object(r.mdx)("p",{parentName:"blockquote"},Object(r.mdx)("inlineCode",{parentName:"p"},"KittyOwner")," stores a mapping to an ",Object(r.mdx)("inlineCode",{parentName:"p"},"Option<T::AccountId>")," but that\ngiven Hash may not point to a generated and owned Kitty yet.\nThis means, whenever we fetch the owner of a Kitty, we need to\nresolve the possibility that it returns ",Object(r.mdx)("inlineCode",{parentName:"p"},"None"),". This could be\ncaused by bad user input or even some sort of problem with our\nruntime. Checking will help prevent these kinds of problems.")),Object(r.mdx)("p",null,"An ownership check for our pallet will look something like this:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-rust"},'let owner = Self::owner_of(object_id).ok_or("No owner for this object")?;\n\nensure!(owner == sender, "You are not the owner");\n')),Object(r.mdx)("h4",{id:"c-sanity-checks"},"C. Sanity checks"),Object(r.mdx)("p",null,"In a similar vain of checking permissions, we also need to ensure that our runtime performs regular sanity\nchecks to mitigate any risk that things go wrong ","\u2014"," like users flooding the chain with heavy transactions or anything that could break the chain. "),Object(r.mdx)("p",null,"If we're creating a function geared to update the value of an object in storage,\nthe first thing we better do is make sure the object exists at all.\nBy using ",Object(r.mdx)("inlineCode",{parentName:"p"},"ensure!"),", we can create a safe guard against poor user input, whether malicious or unintentional. For example:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-rust"},"ensure!(<MyObject<T>>::exists(object_id));\n")),Object(r.mdx)("div",{className:"admonition admonition-tip alert alert--success"},Object(r.mdx)("div",{parentName:"div",className:"admonition-heading"},Object(r.mdx)("h5",{parentName:"div"},Object(r.mdx)("span",{parentName:"h5",className:"admonition-icon"},Object(r.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(r.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Your turn! ")),Object(r.mdx)("div",{parentName:"div",className:"admonition-content"},Object(r.mdx)("p",{parentName:"div"},"You now have all the tools necessary to write the ",Object(r.mdx)("inlineCode",{parentName:"p"},"set_price"),' dispatchable function. Remember, "',Object(r.mdx)("em",{parentName:"p"},"verify first, write last"),"\": be sure to perform the appropriate checks before you modify storage, and don't assume that the user is giving you\ngood data to work with!"))),Object(r.mdx)("h3",{id:"2-transfer-a-kitty"},"2. Transfer a Kitty"),Object(r.mdx)("p",null,"Our pallet's storage items already handles ownership of Kitties\n","\u2014"," this means that all our ",Object(r.mdx)("inlineCode",{parentName:"p"},"transfer_Kitty")," function needs to do is update following storage items: "),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"KittyOwner"),": to update the owner of the Kitty."),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"OwnedKittiesArray"),": to update the owned Kitty map for each acount."),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"OwnedKittiesIndex"),": to update the owned Kitty index for each owner."),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"OwnedKittiesCount"),": to update the amount of Kitties a account has.")),Object(r.mdx)("p",null,"You already have the tools you'll need to create the transfer functionality from ",Object(r.mdx)("a",{parentName:"p",href:"#1-set-a-price-for-each-kitty"},"section 1"),". The main difference in how we will\ncreate this functionality for our runtime is that it will have two parts to it:"),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("strong",{parentName:"li"},"A dispatchable function called ",Object(r.mdx)("inlineCode",{parentName:"strong"},"transfer()"),":")," this is what's exposed by your pallet."),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("strong",{parentName:"li"},"A private function called ",Object(r.mdx)("inlineCode",{parentName:"strong"},"transfer_from()"),":")," this will be a helper function called by ",Object(r.mdx)("inlineCode",{parentName:"li"},"transfer()")," to handle all storage updates when transferring a Kitty.")),Object(r.mdx)("p",null,"Separating the logic this way makes the private ",Object(r.mdx)("inlineCode",{parentName:"p"},"transfer_from()")," function reusable\nby other dispatchable functions of our pallet, without needing to rewrite the same logic over and over again. In our case, we're going to reuse it for\nthe ",Object(r.mdx)("inlineCode",{parentName:"p"},"buy_Kitty")," dispatchable we're creating in the next section."),Object(r.mdx)("div",{className:"admonition admonition-tip alert alert--success"},Object(r.mdx)("div",{parentName:"div",className:"admonition-heading"},Object(r.mdx)("h5",{parentName:"div"},Object(r.mdx)("span",{parentName:"h5",className:"admonition-icon"},Object(r.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(r.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Your turn!")),Object(r.mdx)("div",{parentName:"div",className:"admonition-content"},Object(r.mdx)("p",{parentName:"div"},Object(r.mdx)("strong",{parentName:"p"},"Tip:")," Start by writing the ",Object(r.mdx)("inlineCode",{parentName:"p"},"transfer_from()"),' function, making sure you\'ve included all the necessary state changes. Remember to "verify first, write last"!'))),Object(r.mdx)("h3",{id:"3-buy-a-kitty"},"3. Buy a Kitty"),Object(r.mdx)("h4",{id:"a-check-a-kitty-is-for-sale"},"A. Check a Kitty is for Sale"),Object(r.mdx)("p",null,"We can use the ",Object(r.mdx)("inlineCode",{parentName:"p"},"set_price()")," function to check if the Kitty is for sale. Remember that we said a Kitty with the\nprice of 0 means it's not for sale? Easy enough then: write this check by simple using ",Object(r.mdx)("inlineCode",{parentName:"p"},"ensure!()"),"."),Object(r.mdx)("h4",{id:"b-making-a-payment"},"B. Making a Payment"),Object(r.mdx)("p",null,"In the previous step, we've added the functions necessary to transfer the ownership of our\nKittys. But we never actually specified a currrency associated to our pallet, in the event that the Kitty was bought or sold. "),Object(r.mdx)("p",null,"In this step we'll learn how to use FRAME's Currency trait to adjust account balances\nusing its very own ",Object(r.mdx)("a",{parentName:"p",href:"https://crates.parity.io/frame_support/traits/tokens/currency/trait.Currency.html#tymethod.transfer"},Object(r.mdx)("inlineCode",{parentName:"a"},"transfer")," method"),". It's useful to understand why it's important to use the ",Object(r.mdx)("inlineCode",{parentName:"p"},"transfer")," method in particular and how we'll be accessing it: "),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},"The reason we'll be using it is to ensure our runtime has the same understanding of currency throughout the pallets\nit interacts with. The way that we ensure this is to use the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Currency")," trait\nfrom ",Object(r.mdx)("a",{parentName:"p",href:"https://crates.parity.io/frame_support/traits/tokens/currency/trait.Currency.html"},Object(r.mdx)("inlineCode",{parentName:"a"},"frame_support")),". ")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},"Conveniently, it handles a\n",Object(r.mdx)("inlineCode",{parentName:"p"},"Balance")," type, making it compatible with ",Object(r.mdx)("inlineCode",{parentName:"p"},"pallet_balances")," which we've been\nusing from our pallet's configuration trait. Take a look at how the ",Object(r.mdx)("inlineCode",{parentName:"p"},"transfer"),"\nfunction we'll be using is structured (from the Rust docs):"))),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-rust"},"fn transfer(\n    source: &AccountId,\n    dest: &AccountId,\n    value: Self::Balance,\n    existence_requirement: ExistenceRequirement\n) -> DispatchResult\n")),Object(r.mdx)("p",null,"In order to use it, we'll need to import ",Object(r.mdx)("inlineCode",{parentName:"p"},"Currency")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"ExistenceRequirement")," from ",Object(r.mdx)("inlineCode",{parentName:"p"},"frame_support"),". "),Object(r.mdx)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.mdx)("div",{parentName:"div",className:"admonition-heading"},Object(r.mdx)("h5",{parentName:"div"},Object(r.mdx)("span",{parentName:"h5",className:"admonition-icon"},Object(r.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(r.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),'"Verify First, Write Last" checklist')),Object(r.mdx)("div",{parentName:"div",className:"admonition-content"},Object(r.mdx)("p",{parentName:"div"},"Now that we've gone over the necessary components for our ",Object(r.mdx)("inlineCode",{parentName:"p"},"buy_Kitty")," dispatchable function,\nyou have everything you need to know to put it together ","\u2014"," you're in the drivers seat! Use the following points as\na guide to write ",Object(r.mdx)("inlineCode",{parentName:"p"},"buy_Kitty")," from scratch."),Object(r.mdx)("p",{parentName:"div"},Object(r.mdx)("strong",{parentName:"p"},"Basic sanity checks")),Object(r.mdx)("ul",{parentName:"div"},Object(r.mdx)("li",{parentName:"ul"},"it will take 3 arguments: ",Object(r.mdx)("inlineCode",{parentName:"li"},"origin"),", ",Object(r.mdx)("inlineCode",{parentName:"li"},"Kitty_id")," and ",Object(r.mdx)("inlineCode",{parentName:"li"},"max_price")),Object(r.mdx)("li",{parentName:"ul"},"check that ",Object(r.mdx)("inlineCode",{parentName:"li"},"Kitty_id")," corresponds to a Kitty in storage"),Object(r.mdx)("li",{parentName:"ul"},"check that the Kitty has an owner")),Object(r.mdx)("p",{parentName:"div"},Object(r.mdx)("strong",{parentName:"p"},"Check if purchasing a Kitty is authorized")),Object(r.mdx)("ul",{parentName:"div"},Object(r.mdx)("li",{parentName:"ul"},"check that the account buying the Kitty doesn't already own it"),Object(r.mdx)("li",{parentName:"ul"},"check that the price of the Kitty is not zero (if it is, throw an error)"),Object(r.mdx)("li",{parentName:"ul"},"check that the Kitty price is not greater than ",Object(r.mdx)("inlineCode",{parentName:"li"},"ask_price"))),Object(r.mdx)("p",{parentName:"div"},Object(r.mdx)("strong",{parentName:"p"},"Update storage items")),Object(r.mdx)("ul",{parentName:"div"},Object(r.mdx)("li",{parentName:"ul"},"use the ",Object(r.mdx)("inlineCode",{parentName:"li"},"transfer")," method from the ",Object(r.mdx)("inlineCode",{parentName:"li"},"Currency")," trait to update\naccount balances "),Object(r.mdx)("li",{parentName:"ul"},"use our pallet's ",Object(r.mdx)("inlineCode",{parentName:"li"},"transfer_from")," function to change the ownership\nof the Kitty from ",Object(r.mdx)("inlineCode",{parentName:"li"},"owner")," to ",Object(r.mdx)("inlineCode",{parentName:"li"},"sender")),Object(r.mdx)("li",{parentName:"ul"},"update the price of the Kitty to the price it was sold at")))),Object(r.mdx)("div",{className:"admonition admonition-tip alert alert--success"},Object(r.mdx)("div",{parentName:"div",className:"admonition-heading"},Object(r.mdx)("h5",{parentName:"div"},Object(r.mdx)("span",{parentName:"h5",className:"admonition-icon"},Object(r.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(r.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Your turn!")),Object(r.mdx)("div",{parentName:"div",className:"admonition-content"},Object(r.mdx)("p",{parentName:"div"},"Write the ",Object(r.mdx)("inlineCode",{parentName:"p"},"buy_Kitty")," dispatchable."),Object(r.mdx)("p",{parentName:"div"},Object(r.mdx)("strong",{parentName:"p"},"Hint #1"),": Make sure you include all the relevant checks ","\u2014"," refer back to the checklist above!"),Object(r.mdx)("p",{parentName:"div"},Object(r.mdx)("strong",{parentName:"p"},"Hint #2"),": Make sure to import any other dependencies you might need"))),Object(r.mdx)("h3",{id:"4-breed-kitties"},"4. Breed Kitties"),Object(r.mdx)("p",null,"The logic behind breeding two Kitties is to multiply each corresponding DNA segment from two Kitties,\nwhich will produce a new DNA sequence. Then, that DNA is used when minting a new Kitty. This piece is written for you to use. Here's what that\nlooks like in code:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-rust"},"    let Kitty_1 = Self::Kitty(Kitty_id_1);\n    let Kitty_2 = Self::Kitty(Kitty_id_2);\n\n    let mut final_dna = Kitty_1.dna;\n    for (i, (dna_2_element, r)) in Kitty_2\n        .dna\n        .as_ref()\n        .iter()\n        .zip(random_hash.as_ref().iter())\n        .enumerate()\n    {\n        if r % 2 == 0 {\n            final_dna.as_mut()[i] = *dna_2_element;\n        }\n    }\n")),Object(r.mdx)("p",null,"For the ",Object(r.mdx)("inlineCode",{parentName:"p"},"breed_kitty")," dispatchable, you will need to handle the user inputs of Kitty IDs to breed. Then call the ",Object(r.mdx)("inlineCode",{parentName:"p"},"mint()")," function to create the new Kitty."),Object(r.mdx)("div",{className:"admonition admonition-tip alert alert--success"},Object(r.mdx)("div",{parentName:"div",className:"admonition-heading"},Object(r.mdx)("h5",{parentName:"div"},Object(r.mdx)("span",{parentName:"h5",className:"admonition-icon"},Object(r.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(r.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Your turn!")),Object(r.mdx)("div",{parentName:"div",className:"admonition-content"},Object(r.mdx)("p",{parentName:"div"},"Write ",Object(r.mdx)("inlineCode",{parentName:"p"},"breed_Kitty")," following the template file for this part of the tutorial."))),Object(r.mdx)("h3",{id:"5-update-runtimelibrs-and-interact-with-your-kitties"},"5. Update ",Object(r.mdx)("inlineCode",{parentName:"h3"},"runtime/lib.rs")," and interact with your Kitties"),Object(r.mdx)("p",null,"If you've completed all of the preceding parts and steps of this tutorial, you're\nall geared up to run your chain and start interacting with all the new capabilities of your Kitties pallet. "),Object(r.mdx)("p",null,"Build and run your chain using the following commands:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-bash"},"cargo build --release \n./target/release/kitties-node --dev\n")),Object(r.mdx)("p",null,"Now check your work using the Polkadot-JS Apps UI just like ",Object(r.mdx)("a",{parentName:"p",href:"/docs/Tutorials/Kitties/dispatchables-and-events#5-testing-with-polkadotjs-apps"},"we did in the previous part"),". Once your chain is running and connected to the PolkadotJS Apps UI, perform these manual checks:"),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},"Fund multiple users with tokens so they can all participate"),Object(r.mdx)("li",{parentName:"ul"},"Have each user create multiple Kitties"),Object(r.mdx)("li",{parentName:"ul"},"Try to transfer a Kitty from one user to another using the right and wrong owner"),Object(r.mdx)("li",{parentName:"ul"},"Try to set the price of a Kitty using the right and wrong owner"),Object(r.mdx)("li",{parentName:"ul"},"Buy a Kitty using an owner and another user"),Object(r.mdx)("li",{parentName:"ul"},"Use too little funds to purchase a Kitty"),Object(r.mdx)("li",{parentName:"ul"},"Overspend on the cost of the Kitty and ensure that the balance is reduced appropriately"),Object(r.mdx)("li",{parentName:"ul"},"Breed a Kitty and check that the new DNA is a mix of the old and new")),Object(r.mdx)("p",null,"After all of these actions, confirm that all users have the right number of Kitties, the total Kitty count is correct, and any other storage variables are correctly represented"),Object(r.mdx)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.mdx)("div",{parentName:"div",className:"admonition-heading"},Object(r.mdx)("h5",{parentName:"div"},Object(r.mdx)("span",{parentName:"h5",className:"admonition-icon"},Object(r.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(r.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Congratulations!")),Object(r.mdx)("div",{parentName:"div",className:"admonition-content"},Object(r.mdx)("p",{parentName:"div"},"You've successfully created the backend of a fully functional Substrate chain capable of creating and managing Substrate Kitties. It could also be abstracted to other NFT-like use cases. Most importantly, at this point in the tutorial you should have all the knowledge you need to start creating your own pallet logic and dispatchable functions. "))),Object(r.mdx)("h2",{id:"next-steps"},"Next steps"),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},"Connect your chain to the front-end template"),Object(r.mdx)("li",{parentName:"ul"},"Customize the template using PolkadotJS API"),Object(r.mdx)("li",{parentName:"ul"},"Interact with your chain ")))}l.isMDXComponent=!0}}]);